version: '1'
services:
  db:
    image: postgres
    container_name: db
    environment:
      - POSTGRES_NAME=django
      - POSTGRES_USER=django
      - POSTGRES_PASSWORD=django
    restart: always
    volumes:
      - ./data/postgres:/var/lib/postgresql/data

  ipfs:
    image: lscr.io/linuxserver/ipfs
    container_name: ipfs
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=Europe/London
    volumes:
      - ./data/ipfs:/config
    ports:
      # - 80:80
      - 4001:4001
      - 5001:5001
      - 8080:8080
      - 443:443 #optional
    restart: always
    networks:
      - chaintify

  server:
    build:
      context: ./chaintify-server
    container_name: server
    ports:
      - 8000:8000
    command: python manage.py runserver 0.0.0.0:8000
    volumes:
      - ./chaintify-server/app:/code
    tty: true
    restart: always
    depends_on:
      - ipfs
    networks:
      - chaintify

  web:
    build:
      context: ./chaintify-webapp
      dockerfile: Dockerfile.prod
    container_name: web
    ports:
      - 3000:3000
      - 49153:49153
    command: yarn start
    # volumes:
    #   - ./chaintify-webapp:/code
    #   - /code/node_modules
    tty: true
    restart: always
    depends_on:
      - server
    networks:
      - chaintify

networks:
  chaintify:
    driver: bridge

# docker-compose run web python manage.py migrate
# docker-compose run web python manage.py createsuperuser 
# docker-compose run web python manage.py collectstatic

# docker-compose run web python manage.pyc migrate
# docker-compose run web python manage.pyc createsuperuser 
# docker-compose run web python manage.pyc collectstatic

# docker exec -it b4f5571e9658 bash
# docker-compose -f .\docker-compose.prod.yaml up web